$primary-color-dark:  #689F38;
$primary-color:        #8BC34A;
$primary-color-transparent:     rgba(139,195,74,0.3);
$primary-color-light:  #DCEDC8;
$primary-color-text:   #212121;
$accent-color:         #FF9800;
$primary-text-color:   #212121;
$secondary-text-color: #727272;
$divider-color:        #c6c6c6;
$primary-color-light-gray: #FAFAFA;
$primary-color-white: #FFFFFF;
$primary-color-gray: #767676;
$light-gray: rgba(118,117,128,0.05);
$bg-color-dark: #212121;
$bg-color-light-gray: #Dedede;

$success-color: #43a047;
$error-color: #e53935;
$warning-color: #fb8c00;
$info-color: #1e88e5;

$facebook-color: #3B5998;
$twitter-color: #326ada;
$github-color: #999999;
$google-plus-color: #dc4e41;

$mobileWidth: 480px;
$tabletWidth: 1024px;
// Import gridle
@import 'gridle/gridle';


// setup the grid (required)
@include gridle_setup((
        context : 12,
        gutter-width : 20px,
        direction : ltr,
));

// make the use of media queries really easy
@include gridle_register_state(mobile, (
        max-width : $mobileWidth
));
@include gridle_register_state(tablet, (
        min-width : $mobileWidth,
        max-width : $tabletWidth
));

// even with full custom queries :
@include gridle_register_state ( landscape, (
        query : "(orientation : landscape)"
) );

//    Sample usage
//    @include keyframes(animationName) {
//        @include transform( translate(0px, 100px))
//    }
@mixin keyframes($animationName)
{
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName}  {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

//    Sample usage
//    @include animation(slide-down, 5s);
//    (name, duration, delay, timing-function, direction, iteration-count, fill-mode, play-state)
@mixin animation($name:'', $duration:'', $delay:'', $timingF:'', $direction:'', $iteration:'', $fillMode:'', $playState:'') {
    @if($name != '') {
        -webkit-animation-name: $name;
        -moz-animation-name: $name;
        animation-name: $name;
    }

    @if($duration != '') {
        -webkit-animation-duration: $duration;
        -moz-animation-duration: $duration;
        animation-duration: $duration;
    }

    @if($timingF != '') {
        -webkit-animation-timing-function: $timingF;
        -moz-animation-timing-function: $timingF;
        animation-timing-function: $timingF;
    }

    @if($delay != '') {
        -webkit-animation-delay: $delay;
        -moz-animation-delay: $delay;
        animation-delay: $delay;
    }

    @if($direction != '') {
        -webkit-animation-direction: $direction;
        -moz-animation-direction: $direction;
        animation-direction: $direction;
    }

    @if($iteration != '') {
        -webkit-animation-iteration-count: $iteration;
        -moz-animation-iteration-count: $iteration;
        animation-iteration-count: $iteration;
    }

    @if($fillMode != '') {
        -webkit-animation-fill-mode: $fillMode;
        -moz-animation-fill-mode: $fillMode;
        animation-fill-mode: $fillMode;
    }

    @if($playState != '') {
        -webkit-animation-play-state: $playState;
        -moz-animation-play-state: $playState;
        animation-play-state: $playState;
    }
}

@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

@mixin transform-origin($val) {
    -webkit-transform-origin: $val;
    -moz-transform-origin: $val;
    -ms-transform-origin: $val;
    transform-origin: $val;
}

@mixin transform-style($val) {
    -webkit-transform-style: $val;
    -moz-transform-style: $val;
    -ms-transform-style: $val;
    transform-style: $val;
}

@mixin perspective($val) {
    -webkit-perspective: $val;
    -moz-perspective: $val;
    -ms-perspective: $val;
    perspective: $val;
}

@mixin perspective-origin($val){
    -webkit-perspective-origin: $val;
    -moz-perspective-origin: $val;
    -ms-perspective-origin: $val;
    perspective-origin: $val;
}

//    Sample usage
//    @include transition(color .3s ease);
@mixin transition( $val : ease 0.5s ) {
    -webkit-transition: $val;
    -moz-transition:$val;
    -o-transition:$val;
    -ms-transition:$val;
    transition:$val;
}

@mixin text-shadow( $top: 3px, $left: 3px, $blur: 3px , $colour: #333 ) {
    -webkit-text-shadow:$top $left $blur $colour;
    -moz-text-shadow:$top $left $blur $colour;
    -o-text-shadow:$top $left $blur $colour;
    text-shadow:$top $left $blur $colour;
}

@mixin box-shadow($top: 3px, $left: 3px, $blur: 4px, $colour: #444, $inset:"") {
    -webkit-box-shadow: #{$inset} $top $left $blur $colour;
    -moz-box-shadow:  #{$inset} $top $left $blur $colour;
    box-shadow: #{$inset} $top $left $blur $colour;
}

@mixin rotate( $val: -2deg ) {
    -webkit-transform: rotate($val);
    -moz-transform: rotate($val);
    -ms-transform: rotate($val);
    -o-transform: rotate($val);
    transform: rotate($val);
}

@function calculateRem($size) {
    $remSize: $size / 16px;
    @return $remSize * 1rem;
}

//    Sample usage
//    @include font-size(12px);
//    This will set font size in rem if browser can use it
@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}